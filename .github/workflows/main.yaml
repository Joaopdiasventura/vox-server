name: Continuous Integration and Deployment

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
      - name: Install
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build

  docker_push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_NAME: jpplay/vox-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: self-hosted
    needs: docker_push
    env:
      IMAGE_NAME: jpplay/vox-server
      DOTENV: ${{ secrets.DOTENV }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write dotenv to file
        run: printf '%s\n' "$DOTENV" > .env

      - name: Export dotenv to GitHub environment
        run: sed '/^\s*$/d' .env | sed '/^\s*#/d' >> $GITHUB_ENV

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin >/dev/null

      - name: Prepare network
        run: docker network create traefik-net >/dev/null 2>&1 || true

      - name: Pull image
        run: docker pull "$IMAGE_NAME:latest" >/dev/null 2>&1 || true

      - name: Deploy server-1
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          docker rm -f "server-1" >/dev/null 2>&1 || true
          docker run -d --name "server-1" \
            --cpus="0.15" \
            --network traefik-net \
            --env-file .env \
            --label "traefik.enable=true" \
            --label 'traefik.http.routers.api.rule=Host("${{ secrets.DOMAIN }}")' \
            --label "traefik.http.routers.api.entrypoints=websecure" \
            --label "traefik.http.routers.api.tls.certresolver=myresolver" \
            --label "traefik.http.routers.api.priority=10" \
            --label "traefik.http.routers.api.service=api" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            --label "traefik.http.services.api.loadbalancer.sticky=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.name=vox_session" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.sameSite=None" \
            "$IMAGE_NAME:latest" >/dev/null

      - name: Deploy server-2
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          docker rm -f "server-2" >/dev/null 2>&1 || true
          docker run -d --name "server-2" \
            --cpus="0.15" \
            --network traefik-net \
            --env-file .env \
            --label "traefik.enable=true" \
            --label 'traefik.http.routers.api.rule=Host("${{ secrets.DOMAIN }}")' \
            --label "traefik.http.routers.api.entrypoints=websecure" \
            --label "traefik.http.routers.api.tls.certresolver=myresolver" \
            --label "traefik.http.routers.api.priority=10" \
            --label "traefik.http.routers.api.service=api" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            --label "traefik.http.services.api.loadbalancer.sticky=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.name=vox_session" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.sameSite=None" \
            "$IMAGE_NAME:latest" >/dev/null

      - name: Deploy server-3
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          docker rm -f "server-3" >/dev/null 2>&1 || true
          docker run -d --name "server-3" \
            --cpus="0.15" \
            --network traefik-net \
            --env-file .env \
            --label "traefik.enable=true" \
            --label 'traefik.http.routers.api.rule=Host("${{ secrets.DOMAIN }}")' \
            --label "traefik.http.routers.api.entrypoints=websecure" \
            --label "traefik.http.routers.api.tls.certresolver=myresolver" \
            --label "traefik.http.routers.api.priority=10" \
            --label "traefik.http.routers.api.service=api" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            --label "traefik.http.services.api.loadbalancer.sticky=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.name=vox_session" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.sameSite=None" \
            "$IMAGE_NAME:latest" >/dev/null

      - name: Deploy server-4
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          docker rm -f "server-4" >/dev/null 2>&1 || true
          docker run -d --name "server-4" \
            --cpus="0.15" \
            --network traefik-net \
            --env-file .env \
            --label "traefik.enable=true" \
            --label 'traefik.http.routers.api.rule=Host("${{ secrets.DOMAIN }}")' \
            --label "traefik.http.routers.api.entrypoints=websecure" \
            --label "traefik.http.routers.api.tls.certresolver=myresolver" \
            --label "traefik.http.routers.api.priority=10" \
            --label "traefik.http.routers.api.service=api" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            --label "traefik.http.services.api.loadbalancer.sticky=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.name=vox_session" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.sameSite=None" \
            "$IMAGE_NAME:latest" >/dev/null

      - name: Deploy server-5
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          docker rm -f "server-5" >/dev/null 2>&1 || true
          docker run -d --name "server-5" \
            --cpus="0.15" \
            --network traefik-net \
            --env-file .env \
            --label "traefik.enable=true" \
            --label 'traefik.http.routers.api.rule=Host("${{ secrets.DOMAIN }}")' \
            --label "traefik.http.routers.api.entrypoints=websecure" \
            --label "traefik.http.routers.api.tls.certresolver=myresolver" \
            --label "traefik.http.routers.api.priority=10" \
            --label "traefik.http.routers.api.service=api" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            --label "traefik.http.services.api.loadbalancer.sticky=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.name=vox_session" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true" \
            --label "traefik.http.services.api.loadbalancer.sticky.cookie.sameSite=None" \
            "$IMAGE_NAME:latest" >/dev/null

      - name: Deploy traefik
        run: |
          docker rm -f traefik >/dev/null 2>&1 || true
          docker run -d --name traefik -p 80:80 -p 443:443 -p 8080:8080 \
            --network traefik-net \
            -v "${{ github.workspace }}/traefik.yml:/etc/traefik/traefik.yml:ro" \
            -v /etc/traefik/letsencrypt:/letsencrypt \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /etc/traefik/config:/etc/traefik/config \
            traefik:v3.2 \
            --providers.docker=true \
            --providers.docker.network=traefik-net >/dev/null

      - name: Cleanup old images
        run: docker image prune -af >/dev/null 2>&1 || true
