name: Continuous Integration and Deployment

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
      - name: Install
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build

  docker_push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_NAME: jpplay/vox-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: self-hosted
    needs: docker_push
    env:
      IMAGE_NAME: jpplay/vox-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy with rollback
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          set -Eeuo pipefail
          trap 'rollback' ERR

          echo "::group::Initialize"
          IMAGE="$IMAGE_NAME:latest"
          ROLLBACK="$IMAGE_NAME:rollback"
          echo "Image to deploy: $IMAGE"
          echo "Rollback image tag: $ROLLBACK"
          echo "::endgroup::"

          rollback() {
            echo "::group::Rollback"
            set +e
            trap - ERR
            echo "Rolling back all services to $ROLLBACK"
            docker rm -f server-1 server-2 server-3 server-4 server-5 traefik >/dev/null 2>&1 || true
            run_api server-1 "$ROLLBACK"
            run_api server-2 "$ROLLBACK"
            run_api server-3 "$ROLLBACK"
            run_api server-4 "$ROLLBACK"
            run_realtime server-5 "$ROLLBACK"
            run_traefik
            echo "Rollback completed"
            echo "::endgroup::"
            exit 1
          }

          run_api() {
            NAME="$1"
            IMG="$2"
            echo "::group::Deploy $NAME"
            echo "Stopping $NAME if exists"
            docker rm -f "$NAME" >/dev/null 2>&1 || true
            echo "Starting $NAME with $IMG"
            docker run -d --name "$NAME" \
              --cpus="0.15" \
              --network traefik-net \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e EMAIL_ADDRESS="${{ secrets.EMAIL_ADDRESS }}" \
              -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e SALTS="${{ secrets.SALTS }}" \
              -e FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              -e URL="${{ secrets.URL }}" \
              --label "traefik.enable=true" \
              --label 'traefik.http.routers.api.rule=Host(`'"$DOMAIN"'`) && PathPrefix(`/`)' \
              --label "traefik.http.routers.api.entrypoints=websecure" \
              --label "traefik.http.routers.api.tls.certresolver=myresolver" \
              --label "traefik.http.routers.api.priority=10" \
              --label "traefik.http.services.api.loadbalancer.server.port=3000" \
              "$IMG" >/dev/null
            echo "Verifying $NAME is running"
            test "$(docker inspect -f '{{.State.Running}}' "$NAME")" = "true"
            echo "$NAME is running"
            echo "::endgroup::"
          }

          run_realtime() {
            NAME="$1"
            IMG="$2"
            echo "::group::Deploy $NAME"
            echo "Stopping $NAME if exists"
            docker rm -f "$NAME" >/dev/null 2>&1 || true
            echo "Starting $NAME with $IMG"
            docker run -d --name "$NAME" \
              --cpus="0.15" \
              --network traefik-net \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e EMAIL_ADDRESS="${{ secrets.EMAIL_ADDRESS }}" \
              -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e SALTS="${{ secrets.SALTS }}" \
              -e FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              -e URL="${{ secrets.URL }}" \
              --label "traefik.enable=true" \
              --label 'traefik.http.routers.realtime.rule=Host(`'"$DOMAIN"'`) && (PathPrefix(`/socket.io/`) || PathPrefix(`/user`))' \
              --label "traefik.http.routers.realtime.entrypoints=websecure" \
              --label "traefik.http.routers.realtime.tls.certresolver=myresolver" \
              --label "traefik.http.routers.realtime.priority=100" \
              --label "traefik.http.services.realtime.loadbalancer.server.port=3000" \
              "$IMG" >/dev/null
            echo "Verifying $NAME is running"
            test "$(docker inspect -f '{{.State.Running}}' "$NAME")" = "true"
            echo "$NAME is running"
            echo "::endgroup::"
          }

          run_traefik() {
            echo "::group::Deploy traefik"
            echo "Stopping traefik if exists"
            docker rm -f traefik >/dev/null 2>&1 || true
            echo "Starting traefik"
            docker run -d --name traefik -p 80:80 -p 443:443 -p 8080:8080 \
              --network traefik-net \
              -v "${{ github.workspace }}/traefik.yml:/etc/traefik/traefik.yml:ro" \
              -v /etc/traefik/letsencrypt:/letsencrypt \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -v /etc/traefik/config:/etc/traefik/config \
              traefik:v3.2 \
              --providers.docker=true \
              --providers.docker.network=traefik-net >/dev/null
            echo "Verifying traefik is running"
            test "$(docker inspect -f '{{.State.Running}}' traefik)" = "true"
            echo "traefik is running"
            echo "::endgroup::"
          }

          echo "::group::Prepare rollback image"
          if docker ps -a --format '{{.Names}}' | grep -q '^server-1$'; then
            CURR_ID="$(docker inspect -f '{{.Image}}' server-1)"
            echo "Tagging current server-1 image as $ROLLBACK"
            docker image tag "$CURR_ID" "$ROLLBACK" || true
          elif docker image inspect "$IMAGE" >/dev/null 2>&1; then
            echo "Tagging $IMAGE as $ROLLBACK"
            docker image tag "$IMAGE" "$ROLLBACK" || true
          else
            echo "No image available to tag as rollback"
          fi
          echo "::endgroup::"

          echo "::group::Docker login"
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin >/dev/null
          echo "Logged in to Docker registry"
          echo "::endgroup::"

          echo "::group::Prepare network"
          docker network create traefik-net >/dev/null 2>&1 || true
          echo "Network traefik-net ready"
          echo "::endgroup::"

          echo "::group::Pull image"
          docker pull "$IMAGE" >/dev/null 2>&1 || true
          echo "Pulled $IMAGE"
          echo "::endgroup::"

          echo "::group::Deploy services"
          run_api server-1 "$IMAGE"
          run_api server-2 "$IMAGE"
          run_api server-3 "$IMAGE"
          run_api server-4 "$IMAGE"
          run_realtime server-5 "$IMAGE"
          run_traefik
          echo "All services deployed successfully"
          echo "::endgroup::"
